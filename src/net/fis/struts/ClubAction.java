package net.fis.struts;


/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import net.fis.hibernate.Club;
import net.fis.hibernate.ClubId;
import net.fis.hibernate.ClubDAO;
import net.fis.hibernate.Federacion;
import net.fis.hibernate.FederacionDAO;

import org.apache.commons.beanutils.PropertyUtils;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.apache.struts.action.DynaActionForm;
import org.apache.struts.actions.DispatchAction;


/**
 * MyEclipse Struts Creation date: 11-16-2006
 * 
 * XDoclet definition:
 * 
 * @struts.action input="/abm/club.jsp" validate="true"
 */
public class ClubAction extends DispatchAction
{

    /**
     * 
     * @param newMessage
     * @param request
     */
    public void setActionMessages(String newMessage, HttpServletRequest request)
    {

        ActionMessages messages = new ActionMessages();
        ActionMessage message = new ActionMessage(newMessage);

        messages.add(ActionMessages.GLOBAL_MESSAGE, message);
        saveMessages(request, messages);
    }

    /**
     * 
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @return
     * @throws Exception
     */
    public ActionForward listAll(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception
    {

        HttpSession session = request.getSession();

        ClubDAO clubDAO = new ClubDAO();
        List clubes = clubDAO.findAll(" order by id");

        session.setAttribute("clubes", clubes);
        ActionForward forward = mapping.findForward("clubes");

        return forward;

    }

    /**
     * 
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @throws Exception
     */
    public void show(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception
    {
        ClubDAO clubDAO = new ClubDAO();
        DynaActionForm daf = (DynaActionForm) form;

        Club club = clubDAO.findByClubId(new Integer((String) daf.getString("id")));

        daf.set("id", String.valueOf(club.getId().getClubId()));
        daf.set("federacion", String.valueOf(club.getId().getFederacion().getFederacionId()));
        daf.set("fedDesc", String.valueOf(club.getId().getFederacion().getFedDescripcion()));
        daf.set("descripcion", String.valueOf(club.getCluDescripcion()));
        daf.set("federado", String.valueOf(club.getCluFederado()));
        
        FederacionDAO federacionDAO = new FederacionDAO();
        List federaciones = federacionDAO.findAll("");
        
        HttpSession session = request.getSession();
        session.setAttribute("federaciones", federaciones);        
    }

    /**
     * 
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @return
     * @throws Exception
     */
    public ActionForward listOne(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception
    {

        show(mapping, form, request, response);

        DynaActionForm daf = (DynaActionForm) form;

        daf.set("metodo", "mostrar");
        ActionForward forward = mapping.findForward("select");

        return forward;
    }

    /**
     * 
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @return
     * @throws Exception
     */
    public ActionForward setInsert(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception
    {

        DynaActionForm daf = (DynaActionForm) form;
        daf.set("metodo", "alta");

        ActionForward forward = mapping.findForward("create");

        return forward;
    }

    /**
     * 
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @return
     * @throws Exception
     */
    public ActionForward insert(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception
    {

        Club club = new Club();
        club.setCluDescripcion((String) PropertyUtils.getSimpleProperty(form, "descripcion"));
        club.setCluFederado((String) PropertyUtils.getSimpleProperty(form, "federado"));
        FederacionDAO federacionDAO = new FederacionDAO();
        Federacion federacion = federacionDAO.findById(new Integer((String) PropertyUtils.getSimpleProperty(form, "federacion")));
        ClubDAO clubDAO = new ClubDAO();
        Integer id = new Integer(clubDAO.findMax().intValue() + 1);
        ClubId clubId = new ClubId(id, federacion);
        club.setId(clubId);

        clubDAO.save(club);

        ActionForward forward = mapping.findForward("success");

        return forward;
    }

    /**
     * 
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @return
     * @throws Exception
     */
    public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception
    {

        ClubDAO clubDAO = new ClubDAO();
        Club club = clubDAO.findByClubId(new Integer((String) PropertyUtils.getSimpleProperty(form, "id")));
        clubDAO.delete(club);

        ActionForward forward = mapping.findForward("success");

        return forward;
    }

    /**
     * 
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @return
     * @throws Exception
     */
    public ActionForward setUpdate(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception
    {

        show(mapping, form, request, response);

        DynaActionForm daf = (DynaActionForm) form;

        daf.set("metodo", "modificacion");
        ActionForward forward = mapping.findForward("update");

        return forward;
    }

    /**
     * 
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @return
     * @throws Exception
     */
    public ActionForward update(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception
    {

        Club club = new Club();
        club.setCluDescripcion((String) PropertyUtils.getSimpleProperty(form, "descripcion"));
        club.setCluFederado((String) PropertyUtils.getSimpleProperty(form, "federado"));
        FederacionDAO federacionDAO = new FederacionDAO();
        
        Integer id = new Integer((String) PropertyUtils.getSimpleProperty(form, "id"));
        Federacion federacion = federacionDAO.findById(new Integer((String) PropertyUtils.getSimpleProperty(form, "federacion")));
        ClubId clubId = new ClubId(id, federacion);
        club.setId(clubId);

        ClubDAO clubDAO = new ClubDAO();
        clubDAO.update(club);

        ActionForward forward = mapping.findForward("success");

        return forward;
    }

    /**
     * 
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @return
     * @throws Exception
     */
    public ActionForward unespecified(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception
    {
        return listAll(mapping, form, request, response);
    }

}
